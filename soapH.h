/* soapH.h
   Generated by gSOAP 2.8.15 from xml-rpc.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

/* _boolean is a typedef element/attribute synonym for byte */

#ifndef SOAP_TYPE__boolean
#define SOAP_TYPE__boolean (21)
#endif

#define soap_default__boolean(soap, a) soap_default_byte(soap, a)


#define soap_out__boolean soap_out_byte


#define soap_in__boolean soap_in_byte


#define soap_put__boolean soap_put_byte


#define soap_get__boolean soap_get_byte


#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_serialize_byte(soap, data), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


/* _i4 is a typedef element/attribute synonym for int */

#ifndef SOAP_TYPE__i4
#define SOAP_TYPE__i4 (24)
#endif

#define soap_default__i4(soap, a) soap_default_int(soap, a)


#define soap_out__i4 soap_out_int


#define soap_in__i4 soap_in_int


#define soap_put__i4 soap_put_int


#define soap_get__i4 soap_get_int


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_serialize_int(soap, data), soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


/* _int is a typedef element/attribute synonym for LONG64 */

#ifndef SOAP_TYPE__int
#define SOAP_TYPE__int (26)
#endif

#define soap_default__int(soap, a) soap_default_LONG64(soap, a)


#define soap_out__int soap_out_LONG64


#define soap_in__int soap_in_LONG64


#define soap_put__int soap_put_LONG64


#define soap_get__int soap_get_LONG64


#ifndef SOAP_TYPE_LONG64
#define SOAP_TYPE_LONG64 (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_serialize_LONG64(soap, data), soap_begin_send(soap) || soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


/* _double is a typedef element/attribute synonym for double */

#ifndef SOAP_TYPE__double
#define SOAP_TYPE__double (23)
#endif

#define soap_default__double(soap, a) soap_default_double(soap, a)


#define soap_out__double soap_out_double


#define soap_in__double soap_in_double


#define soap_put__double soap_put_double


#define soap_get__double soap_get_double


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_serialize_double(soap, data), soap_begin_send(soap) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_serialize_unsignedByte(soap, data), soap_begin_send(soap) || soap_put_unsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_serialize_unsignedInt(soap, data), soap_begin_send(soap) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_unsignedLONG64
#define SOAP_TYPE_unsignedLONG64 (125)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap*, ULONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap*, const ULONG64 *, const char*, const char*);

#ifndef soap_write_unsignedLONG64
#define soap_write_unsignedLONG64(soap, data) ( soap_serialize_unsignedLONG64(soap, data), soap_begin_send(soap) || soap_put_unsignedLONG64(soap, data, "unsignedLong", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap*, ULONG64 *, const char*, const char*);

#ifndef soap_read_unsignedLONG64
#define soap_read_unsignedLONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedLONG64(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_std__wstring
#define SOAP_TYPE_std__wstring (104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__wstring(struct soap*, std::wstring *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_std__wstring
#define soap_write_std__wstring(soap, data) ( soap_serialize_std__wstring(soap, data), soap_begin_send(soap) || soap_put_std__wstring(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_std__wstring
#define soap_read_std__wstring(soap, data) ( soap_begin_recv(soap) || !soap_get_std__wstring(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::wstring * soap_new_std__wstring(struct soap *soap, int n = -1) { return soap_instantiate_std__wstring(soap, n, NULL, NULL, NULL); }

inline std::wstring * soap_new_req_std__wstring(struct soap *soap) { std::wstring *_p = soap_instantiate_std__wstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__wstring(soap, _p); } return _p; }

inline std::wstring * soap_new_set_std__wstring(struct soap *soap) { std::wstring *_p = soap_instantiate_std__wstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__wstring(soap, _p); } return _p; }

inline void soap_delete_std__wstring(struct soap *soap, std::wstring *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__wstring(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_serialize_std__string(soap, data), soap_begin_send(soap) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (279)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_serialize_SOAP_ENV__Fault(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (278)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_serialize_SOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (277)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_serialize_SOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (275)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_serialize_SOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (274)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_serialize_SOAP_ENV__Header(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_methodCall
#define SOAP_TYPE_methodCall (215)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_methodCall(struct soap*, struct methodCall *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_methodCall(struct soap*, const struct methodCall *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_methodCall(struct soap*, const char*, int, const struct methodCall *, const char*);
SOAP_FMAC3 struct methodCall * SOAP_FMAC4 soap_in_methodCall(struct soap*, const char*, struct methodCall *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_methodCall(struct soap*, const struct methodCall *, const char*, const char*);

#ifndef soap_write_methodCall
#define soap_write_methodCall(soap, data) ( soap_serialize_methodCall(soap, data), soap_begin_send(soap) || soap_put_methodCall(soap, data, "methodCall", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct methodCall * SOAP_FMAC4 soap_get_methodCall(struct soap*, struct methodCall *, const char*, const char*);

#ifndef soap_read_methodCall
#define soap_read_methodCall(soap, data) ( soap_begin_recv(soap) || !soap_get_methodCall(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct methodCall * SOAP_FMAC2 soap_instantiate_methodCall(struct soap*, int, const char*, const char*, size_t*);

inline struct methodCall * soap_new_methodCall(struct soap *soap, int n = -1) { return soap_instantiate_methodCall(soap, n, NULL, NULL, NULL); }

inline struct methodCall * soap_new_req_methodCall(struct soap *soap, struct params& params) { struct methodCall *_p = soap_instantiate_methodCall(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_methodCall(soap, _p); _p->params = params; } return _p; }

inline struct methodCall * soap_new_set_methodCall(struct soap *soap, char *methodName, struct params& params) { struct methodCall *_p = soap_instantiate_methodCall(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_methodCall(soap, _p); _p->methodName = methodName; _p->params = params; } return _p; }

inline void soap_delete_methodCall(struct soap *soap, struct methodCall *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_methodCall(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fault
#define SOAP_TYPE_fault (213)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fault(struct soap*, struct fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fault(struct soap*, const struct fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fault(struct soap*, const char*, int, const struct fault *, const char*);
SOAP_FMAC3 struct fault * SOAP_FMAC4 soap_in_fault(struct soap*, const char*, struct fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fault(struct soap*, const struct fault *, const char*, const char*);

#ifndef soap_write_fault
#define soap_write_fault(soap, data) ( soap_serialize_fault(soap, data), soap_begin_send(soap) || soap_put_fault(soap, data, "fault", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct fault * SOAP_FMAC4 soap_get_fault(struct soap*, struct fault *, const char*, const char*);

#ifndef soap_read_fault
#define soap_read_fault(soap, data) ( soap_begin_recv(soap) || !soap_get_fault(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct fault * SOAP_FMAC2 soap_instantiate_fault(struct soap*, int, const char*, const char*, size_t*);

inline struct fault * soap_new_fault(struct soap *soap, int n = -1) { return soap_instantiate_fault(soap, n, NULL, NULL, NULL); }

inline struct fault * soap_new_req_fault(struct soap *soap, struct value& value) { struct fault *_p = soap_instantiate_fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_fault(soap, _p); _p->value = value; } return _p; }

inline struct fault * soap_new_set_fault(struct soap *soap, struct value& value) { struct fault *_p = soap_instantiate_fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_fault(soap, _p); _p->value = value; } return _p; }

inline void soap_delete_fault(struct soap *soap, struct fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_methodResponse
#define SOAP_TYPE_methodResponse (202)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_methodResponse(struct soap*, struct methodResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_methodResponse(struct soap*, const struct methodResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_methodResponse(struct soap*, const char*, int, const struct methodResponse *, const char*);
SOAP_FMAC3 struct methodResponse * SOAP_FMAC4 soap_in_methodResponse(struct soap*, const char*, struct methodResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_methodResponse(struct soap*, const struct methodResponse *, const char*, const char*);

#ifndef soap_write_methodResponse
#define soap_write_methodResponse(soap, data) ( soap_serialize_methodResponse(soap, data), soap_begin_send(soap) || soap_put_methodResponse(soap, data, "methodResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct methodResponse * SOAP_FMAC4 soap_get_methodResponse(struct soap*, struct methodResponse *, const char*, const char*);

#ifndef soap_read_methodResponse
#define soap_read_methodResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_methodResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct methodResponse * SOAP_FMAC2 soap_instantiate_methodResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct methodResponse * soap_new_methodResponse(struct soap *soap, int n = -1) { return soap_instantiate_methodResponse(soap, n, NULL, NULL, NULL); }

inline struct methodResponse * soap_new_req_methodResponse(struct soap *soap) { struct methodResponse *_p = soap_instantiate_methodResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_methodResponse(soap, _p); } return _p; }

inline struct methodResponse * soap_new_set_methodResponse(struct soap *soap, struct params *params, struct fault *fault) { struct methodResponse *_p = soap_instantiate_methodResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_methodResponse(soap, _p); _p->params = params; _p->fault = fault; } return _p; }

inline void soap_delete_methodResponse(struct soap *soap, struct methodResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_methodResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_param
#define SOAP_TYPE_param (200)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_param(struct soap*, struct param *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_param(struct soap*, const struct param *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_param(struct soap*, const char*, int, const struct param *, const char*);
SOAP_FMAC3 struct param * SOAP_FMAC4 soap_in_param(struct soap*, const char*, struct param *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_param(struct soap*, const struct param *, const char*, const char*);

#ifndef soap_write_param
#define soap_write_param(soap, data) ( soap_serialize_param(soap, data), soap_begin_send(soap) || soap_put_param(soap, data, "param", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct param * SOAP_FMAC4 soap_get_param(struct soap*, struct param *, const char*, const char*);

#ifndef soap_read_param
#define soap_read_param(soap, data) ( soap_begin_recv(soap) || !soap_get_param(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct param * SOAP_FMAC2 soap_instantiate_param(struct soap*, int, const char*, const char*, size_t*);

inline struct param * soap_new_param(struct soap *soap, int n = -1) { return soap_instantiate_param(soap, n, NULL, NULL, NULL); }

inline struct param * soap_new_req_param(struct soap *soap, struct value& value) { struct param *_p = soap_instantiate_param(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_param(soap, _p); _p->value = value; } return _p; }

inline struct param * soap_new_set_param(struct soap *soap, struct value& value) { struct param *_p = soap_instantiate_param(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_param(soap, _p); _p->value = value; } return _p; }

inline void soap_delete_param(struct soap *soap, struct param *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_param(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_params
#define SOAP_TYPE_params (190)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_params(struct soap*, struct params *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_params(struct soap*, const struct params *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_params(struct soap*, const char*, int, const struct params *, const char*);
SOAP_FMAC3 struct params * SOAP_FMAC4 soap_in_params(struct soap*, const char*, struct params *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_params(struct soap*, const struct params *, const char*, const char*);

#ifndef soap_write_params
#define soap_write_params(soap, data) ( soap_serialize_params(soap, data), soap_begin_send(soap) || soap_put_params(soap, data, "params", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct params * SOAP_FMAC4 soap_get_params(struct soap*, struct params *, const char*, const char*);

#ifndef soap_read_params
#define soap_read_params(soap, data) ( soap_begin_recv(soap) || !soap_get_params(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct params * SOAP_FMAC2 soap_instantiate_params(struct soap*, int, const char*, const char*, size_t*);

inline struct params * soap_new_params(struct soap *soap, int n = -1) { return soap_instantiate_params(soap, n, NULL, NULL, NULL); }

inline struct params * soap_new_req_params(struct soap *soap, int __size, struct param *param) { struct params *_p = soap_instantiate_params(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_params(soap, _p); _p->__size = __size; _p->param = param; } return _p; }

inline struct params * soap_new_set_params(struct soap *soap, int __size, struct param *param) { struct params *_p = soap_instantiate_params(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_params(soap, _p); _p->__size = __size; _p->param = param; } return _p; }

inline void soap_delete_params(struct soap *soap, struct params *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_params(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__array
#define SOAP_TYPE__array (78)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__array(struct soap*, struct _array *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__array(struct soap*, const struct _array *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__array(struct soap*, const char*, int, const struct _array *, const char*);
SOAP_FMAC3 struct _array * SOAP_FMAC4 soap_in__array(struct soap*, const char*, struct _array *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__array(struct soap*, const struct _array *, const char*, const char*);

#ifndef soap_write__array
#define soap_write__array(soap, data) ( soap_serialize__array(soap, data), soap_begin_send(soap) || soap_put__array(soap, data, "array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct _array * SOAP_FMAC4 soap_get__array(struct soap*, struct _array *, const char*, const char*);

#ifndef soap_read__array
#define soap_read__array(soap, data) ( soap_begin_recv(soap) || !soap_get__array(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct _array * SOAP_FMAC2 soap_instantiate__array(struct soap*, int, const char*, const char*, size_t*);

inline struct _array * soap_new__array(struct soap *soap, int n = -1) { return soap_instantiate__array(soap, n, NULL, NULL, NULL); }

inline struct _array * soap_new_req__array(struct soap *soap, struct data& data) { struct _array *_p = soap_instantiate__array(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__array(soap, _p); _p->data = data; } return _p; }

inline struct _array * soap_new_set__array(struct soap *soap, struct data& data) { struct _array *_p = soap_instantiate__array(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__array(soap, _p); _p->data = data; } return _p; }

inline void soap_delete__array(struct soap *soap, struct _array *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__array(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_data
#define SOAP_TYPE_data (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_data(struct soap*, struct data *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_data(struct soap*, const struct data *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_data(struct soap*, const char*, int, const struct data *, const char*);
SOAP_FMAC3 struct data * SOAP_FMAC4 soap_in_data(struct soap*, const char*, struct data *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_data(struct soap*, const struct data *, const char*, const char*);

#ifndef soap_write_data
#define soap_write_data(soap, data) ( soap_serialize_data(soap, data), soap_begin_send(soap) || soap_put_data(soap, data, "data", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct data * SOAP_FMAC4 soap_get_data(struct soap*, struct data *, const char*, const char*);

#ifndef soap_read_data
#define soap_read_data(soap, data) ( soap_begin_recv(soap) || !soap_get_data(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct data * SOAP_FMAC2 soap_instantiate_data(struct soap*, int, const char*, const char*, size_t*);

inline struct data * soap_new_data(struct soap *soap, int n = -1) { return soap_instantiate_data(soap, n, NULL, NULL, NULL); }

inline struct data * soap_new_req_data(struct soap *soap, int __size, struct value *value) { struct data *_p = soap_instantiate_data(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_data(soap, _p); _p->__size = __size; _p->value = value; } return _p; }

inline struct data * soap_new_set_data(struct soap *soap, int __size, struct value *value) { struct data *_p = soap_instantiate_data(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_data(soap, _p); _p->__size = __size; _p->value = value; } return _p; }

inline void soap_delete_data(struct soap *soap, struct data *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_data(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_member
#define SOAP_TYPE_member (75)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_member(struct soap*, struct member *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_member(struct soap*, const struct member *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_member(struct soap*, const char*, int, const struct member *, const char*);
SOAP_FMAC3 struct member * SOAP_FMAC4 soap_in_member(struct soap*, const char*, struct member *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_member(struct soap*, const struct member *, const char*, const char*);

#ifndef soap_write_member
#define soap_write_member(soap, data) ( soap_serialize_member(soap, data), soap_begin_send(soap) || soap_put_member(soap, data, "member", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct member * SOAP_FMAC4 soap_get_member(struct soap*, struct member *, const char*, const char*);

#ifndef soap_read_member
#define soap_read_member(soap, data) ( soap_begin_recv(soap) || !soap_get_member(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct member * SOAP_FMAC2 soap_instantiate_member(struct soap*, int, const char*, const char*, size_t*);

inline struct member * soap_new_member(struct soap *soap, int n = -1) { return soap_instantiate_member(soap, n, NULL, NULL, NULL); }

inline struct member * soap_new_req_member(struct soap *soap, struct value& value) { struct member *_p = soap_instantiate_member(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_member(soap, _p); _p->value = value; } return _p; }

inline struct member * soap_new_set_member(struct soap *soap, char *name, struct value& value) { struct member *_p = soap_instantiate_member(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_member(soap, _p); _p->name = name; _p->value = value; } return _p; }

inline void soap_delete_member(struct soap *soap, struct member *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_member(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__struct
#define SOAP_TYPE__struct (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__struct(struct soap*, struct _struct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__struct(struct soap*, const struct _struct *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__struct(struct soap*, const char*, int, const struct _struct *, const char*);
SOAP_FMAC3 struct _struct * SOAP_FMAC4 soap_in__struct(struct soap*, const char*, struct _struct *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__struct(struct soap*, const struct _struct *, const char*, const char*);

#ifndef soap_write__struct
#define soap_write__struct(soap, data) ( soap_serialize__struct(soap, data), soap_begin_send(soap) || soap_put__struct(soap, data, "struct", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct _struct * SOAP_FMAC4 soap_get__struct(struct soap*, struct _struct *, const char*, const char*);

#ifndef soap_read__struct
#define soap_read__struct(soap, data) ( soap_begin_recv(soap) || !soap_get__struct(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct _struct * SOAP_FMAC2 soap_instantiate__struct(struct soap*, int, const char*, const char*, size_t*);

inline struct _struct * soap_new__struct(struct soap *soap, int n = -1) { return soap_instantiate__struct(soap, n, NULL, NULL, NULL); }

inline struct _struct * soap_new_req__struct(struct soap *soap, int __size, struct member *member) { struct _struct *_p = soap_instantiate__struct(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__struct(soap, _p); _p->__size = __size; _p->member = member; } return _p; }

inline struct _struct * soap_new_set__struct(struct soap *soap, int __size, struct member *member) { struct _struct *_p = soap_instantiate__struct(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__struct(soap, _p); _p->__size = __size; _p->member = member; } return _p; }

inline void soap_delete__struct(struct soap *soap, struct _struct *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__struct(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__rawdata
#define SOAP_TYPE__rawdata (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__rawdata(struct soap*, struct _rawdata *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__rawdata(struct soap*, struct _rawdata const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__rawdata(struct soap*, const char*, int, const struct _rawdata *, const char*);
SOAP_FMAC3 struct _rawdata * SOAP_FMAC4 soap_in__rawdata(struct soap*, const char*, struct _rawdata *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__rawdata(struct soap*, const struct _rawdata *, const char*, const char*);

#ifndef soap_write__rawdata
#define soap_write__rawdata(soap, data) ( soap_serialize__rawdata(soap, data), soap_begin_send(soap) || soap_put__rawdata(soap, data, "rawdata", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct _rawdata * SOAP_FMAC4 soap_get__rawdata(struct soap*, struct _rawdata *, const char*, const char*);

#ifndef soap_read__rawdata
#define soap_read__rawdata(soap, data) ( soap_begin_recv(soap) || !soap_get__rawdata(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct _rawdata * SOAP_FMAC2 soap_instantiate__rawdata(struct soap*, int, const char*, const char*, size_t*);

inline struct _rawdata * soap_new__rawdata(struct soap *soap, int n = -1) { return soap_instantiate__rawdata(soap, n, NULL, NULL, NULL); }

inline struct _rawdata * soap_new_req__rawdata(struct soap *soap) { struct _rawdata *_p = soap_instantiate__rawdata(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__rawdata(soap, _p); } return _p; }

inline struct _rawdata * soap_new_set__rawdata(struct soap *soap, unsigned char *__ptr, int __size) { struct _rawdata *_p = soap_instantiate__rawdata(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__rawdata(soap, _p); _p->__ptr = __ptr; _p->__size = __size; } return _p; }

inline void soap_delete__rawdata(struct soap *soap, struct _rawdata *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__rawdata(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__base64
#define SOAP_TYPE__base64 (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__base64(struct soap*, struct _base64 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__base64(struct soap*, struct _base64 const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__base64(struct soap*, const char*, int, const struct _base64 *, const char*);
SOAP_FMAC3 struct _base64 * SOAP_FMAC4 soap_in__base64(struct soap*, const char*, struct _base64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__base64(struct soap*, const struct _base64 *, const char*, const char*);

#ifndef soap_write__base64
#define soap_write__base64(soap, data) ( soap_serialize__base64(soap, data), soap_begin_send(soap) || soap_put__base64(soap, data, "base64", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct _base64 * SOAP_FMAC4 soap_get__base64(struct soap*, struct _base64 *, const char*, const char*);

#ifndef soap_read__base64
#define soap_read__base64(soap, data) ( soap_begin_recv(soap) || !soap_get__base64(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct _base64 * SOAP_FMAC2 soap_instantiate__base64(struct soap*, int, const char*, const char*, size_t*);

inline struct _base64 * soap_new__base64(struct soap *soap, int n = -1) { return soap_instantiate__base64(soap, n, NULL, NULL, NULL); }

inline struct _base64 * soap_new_req__base64(struct soap *soap) { struct _base64 *_p = soap_instantiate__base64(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__base64(soap, _p); } return _p; }

inline struct _base64 * soap_new_set__base64(struct soap *soap, unsigned char *__ptr, int __size) { struct _base64 *_p = soap_instantiate__base64(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__base64(soap, _p); _p->__ptr = __ptr; _p->__size = __size; } return _p; }

inline void soap_delete__base64(struct soap *soap, struct _base64 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__base64(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (281)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_serialize_PointerToSOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (280)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_serialize_PointerToSOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (276)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_serialize_PointerToSOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTo_rawdata
#define SOAP_TYPE_PointerTo_rawdata (244)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_rawdata(struct soap*, struct _rawdata *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_rawdata(struct soap*, const char *, int, struct _rawdata *const*, const char *);
SOAP_FMAC3 struct _rawdata ** SOAP_FMAC4 soap_in_PointerTo_rawdata(struct soap*, const char*, struct _rawdata **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_rawdata(struct soap*, struct _rawdata *const*, const char*, const char*);

#ifndef soap_write_PointerTo_rawdata
#define soap_write_PointerTo_rawdata(soap, data) ( soap_serialize_PointerTo_rawdata(soap, data), soap_begin_send(soap) || soap_put_PointerTo_rawdata(soap, data, "rawdata", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct _rawdata ** SOAP_FMAC4 soap_get_PointerTo_rawdata(struct soap*, struct _rawdata **, const char*, const char*);

#ifndef soap_read_PointerTo_rawdata
#define soap_read_PointerTo_rawdata(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_rawdata(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo_base64
#define SOAP_TYPE_PointerTo_base64 (242)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_base64(struct soap*, struct _base64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_base64(struct soap*, const char *, int, struct _base64 *const*, const char *);
SOAP_FMAC3 struct _base64 ** SOAP_FMAC4 soap_in_PointerTo_base64(struct soap*, const char*, struct _base64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_base64(struct soap*, struct _base64 *const*, const char*, const char*);

#ifndef soap_write_PointerTo_base64
#define soap_write_PointerTo_base64(soap, data) ( soap_serialize_PointerTo_base64(soap, data), soap_begin_send(soap) || soap_put_PointerTo_base64(soap, data, "base64", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct _base64 ** SOAP_FMAC4 soap_get_PointerTo_base64(struct soap*, struct _base64 **, const char*, const char*);

#ifndef soap_read_PointerTo_base64
#define soap_read_PointerTo_base64(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_base64(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo_double
#define SOAP_TYPE_PointerTo_double (236)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_double(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_double(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTo_double(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_double(struct soap*, double *const*, const char*, const char*);

#ifndef soap_write_PointerTo_double
#define soap_write_PointerTo_double(soap, data) ( soap_serialize_PointerTo_double(soap, data), soap_begin_send(soap) || soap_put_PointerTo_double(soap, data, "double", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTo_double(struct soap*, double **, const char*, const char*);

#ifndef soap_read_PointerTo_double
#define soap_read_PointerTo_double(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_double(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo_int
#define SOAP_TYPE_PointerTo_int (234)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_int(struct soap*, LONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_int(struct soap*, const char *, int, LONG64 *const*, const char *);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerTo_int(struct soap*, const char*, LONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_int(struct soap*, LONG64 *const*, const char*, const char*);

#ifndef soap_write_PointerTo_int
#define soap_write_PointerTo_int(soap, data) ( soap_serialize_PointerTo_int(soap, data), soap_begin_send(soap) || soap_put_PointerTo_int(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerTo_int(struct soap*, LONG64 **, const char*, const char*);

#ifndef soap_read_PointerTo_int
#define soap_read_PointerTo_int(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_int(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo_boolean
#define SOAP_TYPE_PointerTo_boolean (232)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_boolean(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_boolean(struct soap*, const char *, int, char *const*, const char *);
SOAP_FMAC3 char ** SOAP_FMAC4 soap_in_PointerTo_boolean(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_boolean(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_PointerTo_boolean
#define soap_write_PointerTo_boolean(soap, data) ( soap_serialize_PointerTo_boolean(soap, data), soap_begin_send(soap) || soap_put_PointerTo_boolean(soap, data, "boolean", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_PointerTo_boolean(struct soap*, char **, const char*, const char*);

#ifndef soap_read_PointerTo_boolean
#define soap_read_PointerTo_boolean(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_boolean(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTomethodResponse
#define SOAP_TYPE_PointerTomethodResponse (216)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomethodResponse(struct soap*, struct methodResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomethodResponse(struct soap*, const char *, int, struct methodResponse *const*, const char *);
SOAP_FMAC3 struct methodResponse ** SOAP_FMAC4 soap_in_PointerTomethodResponse(struct soap*, const char*, struct methodResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomethodResponse(struct soap*, struct methodResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTomethodResponse
#define soap_write_PointerTomethodResponse(soap, data) ( soap_serialize_PointerTomethodResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTomethodResponse(soap, data, "methodResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct methodResponse ** SOAP_FMAC4 soap_get_PointerTomethodResponse(struct soap*, struct methodResponse **, const char*, const char*);

#ifndef soap_read_PointerTomethodResponse
#define soap_read_PointerTomethodResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTomethodResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTofault
#define SOAP_TYPE_PointerTofault (214)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofault(struct soap*, struct fault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofault(struct soap*, const char *, int, struct fault *const*, const char *);
SOAP_FMAC3 struct fault ** SOAP_FMAC4 soap_in_PointerTofault(struct soap*, const char*, struct fault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofault(struct soap*, struct fault *const*, const char*, const char*);

#ifndef soap_write_PointerTofault
#define soap_write_PointerTofault(soap, data) ( soap_serialize_PointerTofault(soap, data), soap_begin_send(soap) || soap_put_PointerTofault(soap, data, "fault", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct fault ** SOAP_FMAC4 soap_get_PointerTofault(struct soap*, struct fault **, const char*, const char*);

#ifndef soap_read_PointerTofault
#define soap_read_PointerTofault(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofault(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToparams
#define SOAP_TYPE_PointerToparams (212)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToparams(struct soap*, struct params *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToparams(struct soap*, const char *, int, struct params *const*, const char *);
SOAP_FMAC3 struct params ** SOAP_FMAC4 soap_in_PointerToparams(struct soap*, const char*, struct params **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToparams(struct soap*, struct params *const*, const char*, const char*);

#ifndef soap_write_PointerToparams
#define soap_write_PointerToparams(soap, data) ( soap_serialize_PointerToparams(soap, data), soap_begin_send(soap) || soap_put_PointerToparams(soap, data, "params", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct params ** SOAP_FMAC4 soap_get_PointerToparams(struct soap*, struct params **, const char*, const char*);

#ifndef soap_read_PointerToparams
#define soap_read_PointerToparams(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToparams(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToparam
#define SOAP_TYPE_PointerToparam (201)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToparam(struct soap*, struct param *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToparam(struct soap*, const char *, int, struct param *const*, const char *);
SOAP_FMAC3 struct param ** SOAP_FMAC4 soap_in_PointerToparam(struct soap*, const char*, struct param **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToparam(struct soap*, struct param *const*, const char*, const char*);

#ifndef soap_write_PointerToparam
#define soap_write_PointerToparam(soap, data) ( soap_serialize_PointerToparam(soap, data), soap_begin_send(soap) || soap_put_PointerToparam(soap, data, "param", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct param ** SOAP_FMAC4 soap_get_PointerToparam(struct soap*, struct param **, const char*, const char*);

#ifndef soap_read_PointerToparam
#define soap_read_PointerToparam(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToparam(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_wstring
#define SOAP_TYPE_wstring (122)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstring(struct soap*, wchar_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstring(struct soap*, const char*, int, wchar_t*const*, const char*);
SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_in_wstring(struct soap*, const char*, wchar_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstring(struct soap*, wchar_t *const*, const char*, const char*);

#ifndef soap_write_wstring
#define soap_write_wstring(soap, data) ( soap_serialize_wstring(soap, data), soap_begin_send(soap) || soap_put_wstring(soap, data, "wchar", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 wchar_t ** SOAP_FMAC4 soap_get_wstring(struct soap*, wchar_t **, const char*, const char*);

#ifndef soap_read_wstring
#define soap_read_wstring(soap, data) ( soap_begin_recv(soap) || !soap_get_wstring(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTomember
#define SOAP_TYPE_PointerTomember (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomember(struct soap*, struct member *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomember(struct soap*, const char *, int, struct member *const*, const char *);
SOAP_FMAC3 struct member ** SOAP_FMAC4 soap_in_PointerTomember(struct soap*, const char*, struct member **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomember(struct soap*, struct member *const*, const char*, const char*);

#ifndef soap_write_PointerTomember
#define soap_write_PointerTomember(soap, data) ( soap_serialize_PointerTomember(soap, data), soap_begin_send(soap) || soap_put_PointerTomember(soap, data, "member", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct member ** SOAP_FMAC4 soap_get_PointerTomember(struct soap*, struct member **, const char*, const char*);

#ifndef soap_read_PointerTomember
#define soap_read_PointerTomember(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTomember(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedByte
#define soap_write_PointerTounsignedByte(soap, data) ( soap_serialize_PointerTounsignedByte(soap, data), soap_begin_send(soap) || soap_put_PointerTounsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);

#ifndef soap_read_PointerTounsignedByte
#define soap_read_PointerTounsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTounsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


/* _dateTime_DOTiso8601 is a typedef element/attribute synonym for string */

#ifndef SOAP_TYPE__dateTime_DOTiso8601
#define SOAP_TYPE__dateTime_DOTiso8601 (28)
#endif

#define soap_default__dateTime_DOTiso8601(soap, a) soap_default_string(soap, a)


#define soap_serialize__dateTime_DOTiso8601 soap_serialize_string


#define soap_out__dateTime_DOTiso8601 soap_out_string


#define soap_in__dateTime_DOTiso8601 soap_in_string


#define soap_put__dateTime_DOTiso8601 soap_put_string


#define soap_get__dateTime_DOTiso8601 soap_get_string


/* _string is a typedef element/attribute synonym for string */

#ifndef SOAP_TYPE__string
#define SOAP_TYPE__string (27)
#endif

#define soap_default__string(soap, a) soap_default_string(soap, a)


#define soap_serialize__string soap_serialize_string


#define soap_out__string soap_out_string


#define soap_in__string soap_in_string


#define soap_put__string soap_put_string


#define soap_get__string soap_get_string


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_serialize__QName(soap, data), soap_begin_send(soap) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_serialize_string(soap, data), soap_begin_send(soap) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

/* End of soapH.h */
